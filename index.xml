<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>姚成健的博客</title>
    <link>http://yaochengjian.com/</link>
    <description>Recent content on 姚成健的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-hans</language>
    <lastBuildDate>Thu, 26 Dec 2019 21:51:11 +0800</lastBuildDate>
    
	<atom:link href="http://yaochengjian.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>开博大吉</title>
      <link>http://yaochengjian.com/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Thu, 26 Dec 2019 21:51:11 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>这是我前端学习之路，记录着本人点点滴滴笔记or文章 </description>
    </item>
    
    <item>
      <title>0 - 如何使用hugo搭建个人博客</title>
      <link>http://yaochengjian.com/posts/1/</link>
      <pubDate>Wed, 25 Dec 2019 21:55:11 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/1/</guid>
      <description>1.如何使用hugo搭建个人博客 a:进入https://gohugo.io/官网，下载并安装hugo
b:我的电脑-&amp;gt;属性-&amp;gt;高级系统设置-&amp;gt;环境变量-&amp;gt;path-&amp;gt;添加你hugo的路径地址
c:hugo version查看自己的版本,可以看到就代表自己hugo安装没问题
d:在hugo官网点击Quick Start根据步骤一步步实现(下面都是用命令行操作)
1)hugo new site demo(demo可以更改为自己想要的名字)
2)cd demo 进入demo
3)git init
4)git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
5)echo &amp;lsquo;theme = &amp;ldquo;ananke&amp;rdquo;&amp;rsquo; &amp;raquo; config.toml
6)hugo new posts/my-first-post.md(my-first-post可以更改为自己想要的内容)
7)hugo server -D 可以得到一个预览地址
8)打开config.toml配置
baseURL = &amp;quot;yaochengjian.com&amp;quot; //更改为自己购买的域名languageCode = &amp;quot;zh-CN&amp;quot;title = &amp;quot;姚成健的博客&amp;quot;theme = &amp;quot;ananke&amp;quot;9)hugo -D
10)上面的完成之后，我们会看到demo里面有一个public文件名,我们也要在里面git init每次只需要提交这个文件里面的内容到github仓库即可！！！
11)在github上面创建一个仓库,这里我创建仓库名字是(yaochengjian.github.io),进入仓库找到settings,设置自己购买的域名 12)完成购买域名后，我们需要解析4条记录 13)上面步骤就完成了一个博客搭建啦~需要注意的是,我们需要在content\posts里面添加自己的内容,添加完成后都需要hugo -D,在上传到仓库上面去。</description>
    </item>
    
    <item>
      <title>1 - Node &amp; yarn</title>
      <link>http://yaochengjian.com/posts/2/</link>
      <pubDate>Wed, 25 Dec 2019 21:55:11 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/2/</guid>
      <description>安装node.js   安装双数版本
1.node8 node10 node12 是稳定版
2.尽量选择官网安装
3.下载慢就加入FQ插件的代理
  安装之后
1.自然就有了node命令(因为PATH)
2.自然就有了npm命令
3.自然就有了npx命令
  配置Node.js(因为node.js服务器默认在国外，我们需要用淘宝镜像服务器)
1.npm install -global nrm 缩写 npm i -g nrm
npm 是这个命令的开始
install 是载入意思
global 是全局意思
nrm 是一个npm源管理器，允许你快速地在npm源间切换
2.nrm ls 执行命令查看可选的源
其中带*号的是当前使用的源，如果要切换到taobao源，执行命令nrm use taobao
3.npm config list 查看nrm所有配置
  </description>
    </item>
    
    <item>
      <title>2 - [Git入门]bash命令行入门</title>
      <link>http://yaochengjian.com/posts/3/</link>
      <pubDate>Tue, 24 Dec 2019 11:28:30 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/3/</guid>
      <description>1.文件查看操作 1.命令缩写，程序员把动词缩写，就变成了命令
2.查：查看文件或目录
 查看当前目录绝对路径
pwd
 查看当前目录内容 ls
查看指定目录内容
ls 目录名称  查看文件内容
cat 文件名称(会显示全部内容)
head 文件名称(可以控制想看多少行，从开头开始显示)
tail 文件名称(可以控制想看多少行，从底部开始)
  2.文件的增加删除操作 1.touch 1.txt
确定你路径在哪里，创建一个文件
3.文件(创建 追加 复制 删除)内容 1.echo mmp &amp;gt; 1.txt
向1.txt里面追加内容，最新的命令行会覆盖以前追加的信息
2.echo mmp &amp;raquo; 1.txt
向1.txt里面追加内容，最新的命令行会叠加以前追加的信息
3.echo -e &amp;ldquo;1/n2&amp;rdquo; &amp;gt; 1.txt
向1.txt里面追加两行内容 4.mkdir demo-1
创建一个文件名字为demo-1的目录
mkdir -p a/b/c/d
创建多层目录
5.cp 1.txt 2.txt
复制1.txt内容为2.txt
cp -r demo demo1
复制demo目录内容为demo1
4.移动文件/目录 &amp;amp;&amp;amp; 重命名文件/目录 都是同一个命令 1.mv 1.txt demo
把1.txt移动到demo目录上面</description>
    </item>
    
    <item>
      <title>3 - [Git入门]本地仓库</title>
      <link>http://yaochengjian.com/posts/4/</link>
      <pubDate>Tue, 24 Dec 2019 11:28:30 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/4/</guid>
      <description>1.git就是开启GitHub的钥匙 2.git的6行配置(必须存在，否则git无法使用) git config &amp;ndash;global user.name 你的英文名(yaochengjian)
git config &amp;ndash;global user.email 你的邮箱(915248459@qq.com)
git config &amp;ndash;global push.default simple
git config &amp;ndash;global core.quotepath false
git config &amp;ndash;global core.eaitor &amp;ldquo;code &amp;ndash;wait&amp;rdquo;
git config &amp;ndash;global core.autocrlf input
注意：上面的英文名和邮箱跟Github没有关系，可以跟GitHub的用户名和邮箱保持一致，也可以不一致
3.git可以让你的代码有版本(可以随时回退到某个版本，当然git还有其它更强大的功能) 1.git init
会创建.git目录/仓库，用来容纳你的代码快照
2.git add 路径
选择哪些变动是需要提交的，相对路径/绝对路径
3..gitignore
描述哪些变动是不需要提交的
4.git status
通过这个命令可以查看哪些文件需要提交的
5.git commit -m 字符串
把上面提交的代码复制一份到.git目录里面
git commit -v
个人更喜欢&amp;ndash;verbose选项，因为它能帮我回顾刚刚改了什么东西，而且会迫使我把提交理由写得更详细一些
6.git log
可以显示所有提交过的版本信息
7.git reflog
可以查看所有分支操作记录以及提交过的版本
git reset &amp;ndash;hard 0aa5218(版本号)
版本回退，可以选择之前提交过的版本
8.查看分支 创建分支 切换分支 合并分支 删除分支</description>
    </item>
    
    <item>
      <title>4 - [Git入门]git远程仓库GitHub</title>
      <link>http://yaochengjian.com/posts/5/</link>
      <pubDate>Tue, 24 Dec 2019 11:28:30 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/5/</guid>
      <description>操控远程仓库GitHub 1.如何生成ssh key(需要在github上面填写公钥)
a. 运行ssh-keygen -t rsa -b 4096 -C 你的邮箱
b. 一直回车，直至到没有提示
2.如何测试配对成功
a. ssh -T git@github.com
b. 如果问你yes/no，请回答yes并回车
3.上传代码
a. 新建GitHub Repo，赋值其ssh地址
b. git remote add origin git@xxxxxxxx
c. 在本地仓库添加远程仓库地址
d. origin是远程仓库的默认名字，可以换，建议不要换
e. 不要使用https://地址，因为每次都需要密码
f. git push -u origin master 推送本地master分支到远程origin的master分支
4.如何下载代码
a. gitclone git@xxxx[目标路径] b. 如果是不同机器，要写上传新的ssh key[一机一key]</description>
    </item>
    
    <item>
      <title>5 - HTML入门笔记1</title>
      <link>http://yaochengjian.com/posts/6/</link>
      <pubDate>Tue, 24 Dec 2019 11:28:30 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/6/</guid>
      <description>1.HTML是谁发明的 蒂姆·伯纳斯-李是第一个使用超文本来分享资讯，及于1990发明了首个网页浏览器&amp;ndash;WorldWideWeb的人
2.HTML起手式应该写什么 &amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1.0&amp;quot;/&amp;gt;&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie-edge&amp;quot;/&amp;gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;3.章节标签(表示文章/书的层级) -标题 h1~h6 -章节 section -文章 article
-段落 p -头部 header -脚部 footer
-主要内容 main -旁支分支 aside -划分 div
4.全局属性(所有标签都有的属性) -class 类选择器
-contenteditable 页面实时编辑
-hidden 隐藏
-id 选择器ID
-style 样式，行内样式
-tabindex 用来控制键盘tab顺序，从序号1开始，0代表最后一个
-title 标题
5.内容标签 -ol+li 有序列表ol子集不能含有任何子元素或者中文
-ul+li 无序列表ul子集不能含有任何子元素或者中文
-dl+dt+dd 描述列表，dt是描述的对象，dd描述对象的内容
-pre 被包围在  标签 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体
-hr 水平分割线
-br 换行</description>
    </item>
    
    <item>
      <title>6 - [HTML全解]HTML重难点</title>
      <link>http://yaochengjian.com/posts/7/</link>
      <pubDate>Tue, 24 Dec 2019 11:28:30 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/7/</guid>
      <description>1.像用户一样利用网址来打开网页 1)yarn global add parcel
2)parcel 1.a.html(文件名字)
2.a 标签(属性) (1)href 取值
a:网址[https://google.com、http://google.com、//google.com]
b:路径[/a/b/c 或者 a/b/c]
c:伪协议[javascript:;代码、mailto:邮箱、tel:手机号]
d:id[href=&amp;rdquo;#xxx&amp;quot;定位锚文本为#xxx 标签]
网址&amp;lt;a href = &amp;quot;https://google.com&amp;quot;&amp;gt;谷歌&amp;lt;/a&amp;gt;&amp;lt;a href = &amp;quot;https://google.com&amp;quot;&amp;gt;谷歌&amp;lt;/a&amp;gt;&amp;lt;a href = &amp;quot;//google.com&amp;quot;&amp;gt;谷歌&amp;lt;/a&amp;gt;路径&amp;lt;a href = &amp;quot;/a/b/c&amp;quot;&amp;gt;相对路径&amp;lt;/a&amp;gt;&amp;lt;a href = &amp;quot;a/b/c&amp;quot;&amp;gt;绝对路径&amp;lt;/a&amp;gt;伪协议&amp;lt;a href = &amp;quot;javascript:;&amp;quot;&amp;gt;点击会跳转不了&amp;lt;/a&amp;gt;&amp;lt;a href = &amp;quot;mailto:915248459@qq.com&amp;quot;&amp;gt;邮箱&amp;lt;/a&amp;gt;&amp;lt;a href = &amp;quot;tel:13580466113&amp;quot;&amp;gt;电话&amp;lt;/a&amp;gt;锚文本定位&amp;lt;p id = &amp;quot;xxx&amp;quot;&amp;gt;1&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;2&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;3&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;4&amp;lt;/p&amp;gt;&amp;lt;a href = &amp;quot;#xxx&amp;quot;&amp;gt;会定位到id为#xxx上面去&amp;lt;/a&amp;gt;(2)target 属性值
a:_balck 浏览器总在一个新窗口打开
b:_top 浏览器在当前窗口最顶层打开 c:parent 浏览器在超链接父元素(iframe)上面打开</description>
    </item>
    
    <item>
      <title>7 - [css全解]css基础</title>
      <link>http://yaochengjian.com/posts/8/</link>
      <pubDate>Tue, 24 Dec 2019 11:28:30 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/8/</guid>
      <description>1. 我怎么知道哪些浏览器兼容哪些特性呢？ a：几十种浏览器全部跑一遍
b：使用caniuse.com
2.语法超级简单 语法1
选择器{
属性名:属性值
/*这是一个注释*/
}
p{color:blue;background:red;}!注意事项
a：所有符号都是英文符号，如果写错了，浏览器会警告
b：区分大小写，a和A是不同东西
c：最后一个分号可以省略，但建议不要省略
d：任何地方写错了，都不会报错，浏览器会直接忽略
语法2：@语法
@charset &amp;ldquo;utf-8&amp;rdquo;;
@import url(2.css);
@media(min-width:100px) and (max-width:200px){ }
!注意事项
a：@charset必须放在第一行
b：前面两个@语法必须以分号;结尾
c：charset是字符集的意思，但是utf-8是字符编码
3.border调试法 a：怀疑某个元素有问题就给这个元素加border
b：border没出现?说明选择器错了或者语法错了
c：bug解决了才可以把border删掉
4.文档流 -流动方向
a：inline元素从左到右，到达最右边才会换行
b：block元素从上到下，每一个都另起一行
c：inline-block也是从左到右，但是到达最后的时候不会把自己分为两块 -宽度
a：inline宽度靠内部内容宽度撑开，不能用width指定
b：blcok默认自动计算宽度，可用width 指定
c：inline-block结合前两者特点，可用width
-高度
a：inline高度由line-height间接确定，跟height无关，跟padding无关 b：block高度由内部文档流元素决定(脱离文档流元素除外)，可以设height
c：inline-block跟block类似，可以设置height
5.overflow溢出(当内容大于容器) a：等内容的宽度或高度大于容器，会溢出
b：可用overflow来设置是否显示滚动条
c：auto是灵活设置
d：scroll是永远显示
e：hidden是直接隐藏溢出部分
f：visible是直接显示溢出部分 g：overflow可以分为overflow-x和overflow-y
①块级元素如果没有设置width，那么它默认的宽度就是auto
②永远不要写width=100%，非常特殊的可以写
6.脱离文档流 -哪些元素脱离文档流
a：float
b：position:absolute / fixed
-怎么让元素不脱离文档流
a：不要使用上面属性就不会脱离文档流了
①只要脱离了文档流，就算你清除了，永远都是脱离的了
7.盒模型 ①如果面试官问你！请说一下css盒模型 标准回答：css盒模型分两种</description>
    </item>
    
    <item>
      <title>8 - [css全解]布局</title>
      <link>http://yaochengjian.com/posts/9/</link>
      <pubDate>Tue, 24 Dec 2019 11:28:30 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/9/</guid>
      <description>1.布局分类 两种
a: 固定宽度布局，一般宽度为 960 、 1000 、 1024px
b: 不固定宽度布局，主要靠文档流的原理来布局
2.还记得吗? a: 文档流本来就是自适应的，不需要加额外的样式
&amp;lt;style&amp;gt;span{border:1px solid red;}&amp;lt;/style&amp;gt;//它本来就会根据你页面的宽度大小来自适应&amp;lt;span&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;5&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;5&amp;lt;/span&amp;gt;3.第三种布局 a: 响应式布局
b: 意思就是 pc 上固定宽度，手机上不固定宽度
c: 也就是一种混合布局
4.布局的两种思路 ① 从大到小
先定下大局
然后完善每个部分的小布局
② 从小到大
先完成小布局
然后组合成大布局
③ 两种均可
新人推荐用第二种，因为小的简单
老手一般用第一种，因为熟练有大局观
4.用什么 css 布局 5.float 布局 a: 步骤
-子元素上加 float:left/right 和 width
-在父元素上加.clearfix(必须要加上)
实践 不同布局
-用 float 做两栏布局(如顶部条)
-用 float 做三栏布局(内容区)</description>
    </item>
    
    <item>
      <title>9 - [css全解]定位</title>
      <link>http://yaochengjian.com/posts/10/</link>
      <pubDate>Tue, 24 Dec 2019 11:28:30 +0800</pubDate>
      
      <guid>http://yaochengjian.com/posts/10/</guid>
      <description>问两个问题 -背景的范围是从哪到哪?(正确答案是 B)
A.border 内边沿围成的区域
B.border 外边沿围成的区域
-如何验证自己的猜想?border 半透明化
-从左边看一个 div,是什么样子?
新属性-position a：position
1.static 默认值，待在文档流里
2.relative 相对定位，升起来，但不脱离文档流
3.absolute 绝对定位，定位基准是祖先里的非 static
4.fixed 固定定位，定位基准是 viewport(有诈)
5.sticky 粘滞定位，不好描述直接举例
经验
1.如果你写了 absolute，一般都得补一个 relative
2.如果你写了 absolute 或 fixed，一定要补 top 和 left
3.sticky 兼容性很差，主要用于面试装逼
position:relative
a：使用场景
1.用于做位移对齐(很少用，现在都直接用 display:flex 了)
2.用于给 absolute 元素做爸爸
b：配合 z-index(z-index 必须配合 position 使用，否则不生效)
1.z-index:auto 默认值，不创建新层叠上下文
2.z-index：0 | 1 | 2
3.z-index:-1 | -2
经验
1.写 z-index:9999 的都是彩笔
2.学会管理 z-index
position:absolute
a：使用场景
1.脱离原来的位置，另起一层，比如对话框的关闭按钮</description>
    </item>
    
    <item>
      <title>10 - [css动画]</title>
      <link>http://yaochengjian.com/posts/11/</link>
      <pubDate>Tue, 24 Dec 2019 11:28:30 +0801</pubDate>
      
      <guid>http://yaochengjian.com/posts/11/</guid>
      <description>transform 完整介绍 a: translate(平移)
 translateX(长度 | 百分比) translateY(长度 | 百分比) translate(x 轴,y 轴) translateX(50%) 往右边偏移自身宽度的一半  translate(-50%,-50%) 可做绝对定位元素居中
b: scale(缩放)
 scaleX(number) scaleY(number) scale(X-number,Y-number)  用得较少，因为容易出现模糊
c: rotate(旋转)
d: transform-origin 设置旋转点
 rotate(度数) 沿 Z 轴转动 rotateX(度数) rotateY(度数)  e: skew(倾斜)
 skewX(度数) skewY(度数) skew(X,Y)  用得较少
案例 爱心
transition 过渡 a: 语法
 transition-property 状态发生变化的属性(可以用 all 代表所有属性) transition-timing-function 过渡变化的速度 transition-delay 延迟多长时间开始 transition:width 3s , background 3s(这样我们可以采用多种属性一起过渡) 过渡方式有: ease : 速度逐渐变慢，这是默认值</description>
    </item>
    
    <item>
      <title>11 - [HTTP全解]URL是什么</title>
      <link>http://yaochengjian.com/posts/12/</link>
      <pubDate>Tue, 24 Dec 2019 11:28:30 +0802</pubDate>
      
      <guid>http://yaochengjian.com/posts/12/</guid>
      <description>1.域名是什么 a: 域名实际上是 ip 的别称 知识点
  一个域名可以对应不同 IP
这个叫做均衡负载，防止一台机器扛不住
  一个 IP 可以对应不同域名
这个叫做共享主机，穷开发者会这么做
  域名和 IP 是怎么对应起来的？
通过 DNS
  当你输入 xiedaimala.com
  过程
-你的 Chrom 浏览器会向电信|联通提供的 DNS 服务器询问 xiedaimala.com 对应 IP
-电信|联通会回答一个 IP(具体过程很复杂，不研究)
-然后 Chrome 才会想对应 IP 的 80/443 端口发送请求
-请求内容是查看 xiedaimala.com 的首要
为什么事 80 或 443 端口
-服务器默认用 80 提供 http 服务
-服务器默认用 443 提供 https 服务
-你可以在开发者工具里看到具体的端口
如何请求不同的页面
-路径可以做到(不同的路径可以请求不同的页面)
同一个页面，不同内容</description>
    </item>
    
    <item>
      <title>1000 - 变量提升、闭包</title>
      <link>http://yaochengjian.com/posts/1000/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://yaochengjian.com/posts/1000/</guid>
      <description>1.一般都把 js 放到 body 的末尾 a:为什么？
b:放在 head 中可以不可以？如何放到 head 中也可以实现出放到 body 末尾的效果？
c:script 标签中有两个属性：defer / async,这两个属性是做什么的？
2.js 数据渲染机制及堆栈内存 a:基本类型(因为数据简单，之间在全局作用域开辟一个地址存储)
&amp;lt;!--1.变量提升(找var和函数(var开始定义是undefined、函数定义赋值是同时完成的))--&amp;gt;var a = 12;var b = a;b = 13;console.log(a);b:引用类型(因为数据复杂，所以会开辟一个堆内存来存储)
var ary1 = [12,23];var ary2 = ary1;ary2.push(100);console.log(ary1);A:栈内存:作用域
1.提供一个供 js 代码自上而下执行的环境(代码都是在栈内存中执行的)
2.由于基本数据类型比较简单，他们都是直接在栈内存中开辟一个位置，把值直接存进去的
=&amp;gt;当栈内存被销毁，存储的那些基本值也都跟着销毁了
B:堆内存:引用值对应的空间
1.存储引用类型值(对象:键值对 函数:代码字符串)
=&amp;gt;当前堆内存稀释被销毁，那么这个引用值彻底没了
=&amp;gt;堆内存的释放：当堆内存没有被任何变量或者其它东西所占用，浏览器会在空闲的时候，自主进行内存回收，把所有不被占用的堆内存销毁掉
=&amp;gt;xxx = null 通过空对象指针 null 可以让原始变量(或者其它东西)谁都不指向，那么原有被占用内存就没有被东西占用了，浏览器就会销毁它</description>
    </item>
    
  </channel>
</rss>